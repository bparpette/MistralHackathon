#!/bin/bash

# Script pour d√©marrer le syst√®me complet : Qdrant + Serveur MCP
echo "üöÄ D√©marrage du syst√®me complet : Qdrant + Serveur MCP"
echo "====================================================="

# Fonction pour v√©rifier si un port est utilis√©
check_port() {
    local port=$1
    if lsof -Pi :$port -sTCP:LISTEN -t >/dev/null 2>&1; then
        return 0  # Port utilis√©
    else
        return 1  # Port libre
    fi
}

# Fonction pour attendre qu'un service soit pr√™t
wait_for_service() {
    local url=$1
    local max_attempts=30
    local attempt=1
    
    echo "‚è≥ Attente que le service soit pr√™t..."
    while [ $attempt -le $max_attempts ]; do
        if curl -s "$url" >/dev/null 2>&1; then
            echo "‚úÖ Service pr√™t !"
            return 0
        fi
        echo "   Tentative $attempt/$max_attempts..."
        sleep 2
        ((attempt++))
    done
    echo "‚ùå Service non disponible apr√®s $max_attempts tentatives"
    return 1
}

# V√©rifier si Qdrant est d√©j√† en cours d'ex√©cution
if check_port 6333; then
    echo "‚úÖ Qdrant est d√©j√† en cours d'ex√©cution sur le port 6333"
else
    echo "üì¶ D√©marrage de Qdrant..."
    ./start_qdrant.sh
    if [ $? -ne 0 ]; then
        echo "‚ùå Erreur lors du d√©marrage de Qdrant"
        exit 1
    fi
    
    # Attendre que Qdrant soit pr√™t
    wait_for_service "http://localhost:6333/health"
    if [ $? -ne 0 ]; then
        echo "‚ùå Qdrant n'est pas pr√™t"
        exit 1
    fi
fi

# V√©rifier si le serveur MCP est d√©j√† en cours d'ex√©cution
if check_port 3000; then
    echo "‚úÖ Le serveur MCP est d√©j√† en cours d'ex√©cution sur le port 3000"
else
    echo "üîß D√©marrage du serveur MCP..."
    
    # Activer l'environnement virtuel si disponible
    if [ -f "venv/bin/activate" ]; then
        echo "üêç Activation de l'environnement virtuel..."
        source venv/bin/activate
    elif [ -f ".venv/bin/activate" ]; then
        echo "üêç Activation de l'environnement virtuel..."
        source .venv/bin/activate
    fi
    
    # D√©marrer le serveur MCP en arri√®re-plan
    echo "üöÄ Lancement du serveur MCP..."
    python main.py &
    MCP_PID=$!
    
    # Attendre que le serveur MCP soit pr√™t
    wait_for_service "http://localhost:3000/health"
    if [ $? -ne 0 ]; then
        echo "‚ùå Le serveur MCP n'est pas pr√™t"
        kill $MCP_PID 2>/dev/null
        exit 1
    fi
    
    echo "‚úÖ Serveur MCP d√©marr√© avec PID: $MCP_PID"
fi

echo ""
echo "üéâ Syst√®me complet d√©marr√© avec succ√®s !"
echo ""
echo "üîó URLs utiles:"
echo "   - Qdrant Dashboard: http://localhost:6333/dashboard"
echo "   - Serveur MCP: http://localhost:3000"
echo "   - Health Check: http://localhost:3000/health"
echo ""
echo "üß™ Pour tester le syst√®me:"
echo "   python test_chat_system.py"
echo ""
echo "üõë Pour arr√™ter le syst√®me:"
echo "   - Qdrant: docker stop qdrant-local"
echo "   - Serveur MCP: kill $MCP_PID (ou Ctrl+C si en premier plan)"
echo ""

# Garder le script en vie pour pouvoir arr√™ter les services
echo "Appuyez sur Ctrl+C pour arr√™ter tous les services..."
trap 'echo "üõë Arr√™t des services..."; docker stop qdrant-local 2>/dev/null; kill $MCP_PID 2>/dev/null; exit 0' INT

# Attendre ind√©finiment
while true; do
    sleep 1
done

#!/usr/bin/env python3
"""
Script de test r√©seau simple pour mesurer les temps de connexion
Ne n√©cessite pas d'installer qdrant_client
"""

import time
import socket
import urllib.parse
import urllib.request
import ssl
from datetime import datetime

def test_tcp_connection():
    """Test de connexion TCP simple"""
    print("üîå Test de connexion TCP")
    print("-" * 30)
    
    url = "https://f22a8bbc-f8d2-4282-8b09-eec1afac3074.europe-west3-0.gcp.cloud.qdrant.io:6333"
    parsed = urllib.parse.urlparse(url)
    host = parsed.hostname
    port = parsed.port or 443
    
    print(f"Host: {host}")
    print(f"Port: {port}")
    
    # Test TCP
    start_time = time.time()
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(10)
        result = sock.connect_ex((host, port))
        sock.close()
        
        tcp_time = time.time() - start_time
        
        if result == 0:
            print(f"‚úÖ Connexion TCP r√©ussie en {tcp_time:.3f}s")
            return tcp_time
        else:
            print(f"‚ùå Connexion TCP √©chou√©e (code: {result})")
            return None
            
    except Exception as e:
        print(f"‚ùå Erreur TCP: {e}")
        return None

def test_https_request():
    """Test de requ√™te HTTPS"""
    print("\nüåê Test de requ√™te HTTPS")
    print("-" * 30)
    
    url = "https://f22a8bbc-f8d2-4282-8b09-eec1afac3074.europe-west3-0.gcp.cloud.qdrant.io:6333/collections"
    
    # Test HTTPS
    start_time = time.time()
    try:
        # Cr√©er un contexte SSL
        ssl_context = ssl.create_default_context()
        
        # Cr√©er la requ√™te
        request = urllib.request.Request(url)
        request.add_header('api-key', 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhY2Nlc3MiOiJtIn0.dTojrUAcLmujBlbrJyQ_oILGXQcWVhF7B8sOTWiIyLw')
        
        # Ex√©cuter la requ√™te
        with urllib.request.urlopen(request, timeout=10, context=ssl_context) as response:
            data = response.read()
            https_time = time.time() - start_time
            
            print(f"‚úÖ Requ√™te HTTPS r√©ussie en {https_time:.3f}s")
            print(f"   Status: {response.status}")
            print(f"   Taille r√©ponse: {len(data)} bytes")
            return https_time
            
    except Exception as e:
        https_time = time.time() - start_time
        print(f"‚ùå Erreur HTTPS apr√®s {https_time:.3f}s: {e}")
        return None

def test_multiple_connections():
    """Test de plusieurs connexions pour mesurer la stabilit√©"""
    print("\nüîÑ Test de connexions multiples")
    print("-" * 30)
    
    times = []
    for i in range(5):
        print(f"Connexion {i+1}/5...", end=" ")
        start_time = time.time()
        
        try:
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(5)
            result = sock.connect_ex(("f22a8bbc-f8d2-4282-8b09-eec1afac3074.europe-west3-0.gcp.cloud.qdrant.io", 6333))
            sock.close()
            
            connect_time = time.time() - start_time
            
            if result == 0:
                times.append(connect_time)
                print(f"{connect_time:.3f}s ‚úÖ")
            else:
                print(f"√âchec ‚ùå")
                
        except Exception as e:
            print(f"Erreur ‚ùå")
    
    if times:
        avg_time = sum(times) / len(times)
        min_time = min(times)
        max_time = max(times)
        
        print(f"\nüìä Statistiques:")
        print(f"   Moyenne: {avg_time:.3f}s")
        print(f"   Minimum: {min_time:.3f}s")
        print(f"   Maximum: {max_time:.3f}s")
        print(f"   Connexions r√©ussies: {len(times)}/5")
        
        return avg_time
    else:
        print("‚ùå Aucune connexion r√©ussie")
        return None

def test_dns_resolution():
    """Test de r√©solution DNS"""
    print("\nüîç Test de r√©solution DNS")
    print("-" * 30)
    
    hostname = "f22a8bbc-f8d2-4282-8b09-eec1afac3074.europe-west3-0.gcp.cloud.qdrant.io"
    
    start_time = time.time()
    try:
        import socket
        ip = socket.gethostbyname(hostname)
        dns_time = time.time() - start_time
        
        print(f"‚úÖ DNS r√©solu en {dns_time:.3f}s")
        print(f"   IP: {ip}")
        return dns_time
        
    except Exception as e:
        dns_time = time.time() - start_time
        print(f"‚ùå Erreur DNS apr√®s {dns_time:.3f}s: {e}")
        return None

def analyze_results(tcp_time, https_time, avg_time, dns_time):
    """Analyse des r√©sultats"""
    print("\n" + "=" * 50)
    print("üìä ANALYSE DES R√âSULTATS")
    print("=" * 50)
    
    if tcp_time:
        print(f"Connexion TCP: {tcp_time:.3f}s")
        if tcp_time > 5:
            print("  ‚ùå PROBL√àME: Connexion TCP tr√®s lente (>5s)")
        elif tcp_time > 3:
            print("  ‚ö†Ô∏è ATTENTION: Connexion TCP lente (>3s)")
        else:
            print("  ‚úÖ OK: Connexion TCP acceptable")
    
    if https_time:
        print(f"Requ√™te HTTPS: {https_time:.3f}s")
        if https_time > 10:
            print("  ‚ùå PROBL√àME: Requ√™te HTTPS tr√®s lente (>10s)")
        elif https_time > 5:
            print("  ‚ö†Ô∏è ATTENTION: Requ√™te HTTPS lente (>5s)")
        else:
            print("  ‚úÖ OK: Requ√™te HTTPS acceptable")
    
    if avg_time:
        print(f"Connexions moyennes: {avg_time:.3f}s")
        if avg_time > 5:
            print("  ‚ùå PROBL√àME: Connexions instables (>5s)")
        elif avg_time > 3:
            print("  ‚ö†Ô∏è ATTENTION: Connexions lentes (>3s)")
        else:
            print("  ‚úÖ OK: Connexions stables")
    
    if dns_time:
        print(f"R√©solution DNS: {dns_time:.3f}s")
        if dns_time > 2:
            print("  ‚ùå PROBL√àME: DNS tr√®s lent (>2s)")
        elif dns_time > 1:
            print("  ‚ö†Ô∏è ATTENTION: DNS lent (>1s)")
        else:
            print("  ‚úÖ OK: DNS rapide")
    
    # Recommandations
    print("\nüí° RECOMMANDATIONS:")
    print("-" * 30)
    
    if tcp_time and tcp_time > 3:
        print("‚Ä¢ R√©duire le timeout Qdrant √† 5s maximum")
        print("‚Ä¢ Consid√©rer l'utilisation d'un CDN ou d'un proxy")
    
    if https_time and https_time > 5:
        print("‚Ä¢ Optimiser les requ√™tes HTTPS")
        print("‚Ä¢ V√©rifier la configuration r√©seau")
    
    if avg_time and avg_time > 3:
        print("‚Ä¢ Impl√©menter un syst√®me de retry avec backoff")
        print("‚Ä¢ Consid√©rer un cache local")
    
    print("‚Ä¢ Utiliser l'initialisation paresseuse (lazy loading)")
    print("‚Ä¢ Impl√©menter un fallback vers stockage local")

if __name__ == "__main__":
    print("üöÄ Test de connectivit√© r√©seau Qdrant")
    print(f"üïê Heure: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("=" * 50)
    
    # Tests
    dns_time = test_dns_resolution()
    tcp_time = test_tcp_connection()
    https_time = test_https_request()
    avg_time = test_multiple_connections()
    
    # Analyse
    analyze_results(tcp_time, https_time, avg_time, dns_time)
    
    print("\nüéØ CONCLUSION:")
    print("=" * 50)
    if tcp_time and tcp_time > 3:
        print("‚ùå Le probl√®me vient probablement de la lenteur de connexion r√©seau")
        print("   La connexion TCP prend plus de 3 secondes, ce qui peut causer")
        print("   des timeouts dans AWS Lambda.")
    else:
        print("‚úÖ La connectivit√© r√©seau semble acceptable")
        print("   Le probl√®me pourrait venir d'ailleurs (imports, initialisation, etc.)")
